f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution
cons_1 <- cbind(mat_i*r_i,mat_j*-400)
cons_2 <- cbind(mat_i*0,mat_j)
cons_3 <- cbind(mat_i*0,mat_j)
cons_4 <- cbind(mat_i*c_i,mat_j*0)
cons_5 <- cbind(mat_i,mat_j*0)
cons_6 <- cbind(matrix(insto_matrix(i,c(3,4,5,8)),nrow = 1),mat_j*0)
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution
cons_1 <- cbind(mat_i*r_i,mat_j*-350)
cons_2 <- cbind(mat_i*0,mat_j)
cons_3 <- cbind(mat_i*0,mat_j)
cons_4 <- cbind(mat_i*c_i,mat_j*0)
cons_5 <- cbind(mat_i,mat_j*0)
cons_6 <- cbind(matrix(insto_matrix(i,c(3,4,5,8)),nrow = 1),mat_j*0)
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution
cons_1 <- cbind(mat_i*r_i,mat_j*-240)
cons_2 <- cbind(mat_i*0,mat_j)
cons_3 <- cbind(mat_i*0,mat_j)
cons_4 <- cbind(mat_i*c_i,mat_j*0)
cons_5 <- cbind(mat_i,mat_j*0)
cons_6 <- cbind(matrix(insto_matrix(i,c(3,4,5,8)),nrow = 1),mat_j*0)
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
# Variables final values
paste("Projects: ",lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i])
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
i <-  8
j <- 10
mat_i <- matrix(1,1,i) #dummy matrix for x coefficients
mat_j <- matrix(1,1,j) #dummy matrix for a coefficients
p_i <- c(2.1, 0.5, 3, 2, 1, 1.5, 0.6, 1.8) #profit
r_i <- c(550, 400, 300, 350, 450, 500, 350, 200) #resource requirement
c_i <- c(200, 150, 400, 450, 300, 150, 200, 600) #cpu limit
cons_1 <- cbind(mat_i*r_i,mat_j*-240)
cons_2 <- cbind(mat_i*0,mat_j)
cons_3 <- cbind(mat_i*0,mat_j)
cons_4 <- cbind(mat_i*c_i,mat_j*0)
cons_5 <- cbind(mat_i,mat_j*0)
cons_6 <- cbind(matrix(insto_matrix(i,c(3,4,5,8)),nrow = 1),mat_j*0)
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
10000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
11,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
5, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
0) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1500,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
p4 <- plotPolytope(
A,
b,
obj,
type = rep("c", ncol(A)),
crit = "max",
faces = rep("c", ncol(A)),
plotFaces = TRUE,
plotFeasible = TRUE,
plotOptimum = TRUE,
labels = "coord"
) + ggplot2::xlab("x") + ggplot2::ylab("y") + ggplot2::ggtitle("Solution (max) with other axis labels")
install.packages(gMOIP)
install.packages("gMOIP")
library(gMOIP)
cons_1 <- cbind(mat_i*r_i,mat_j*-240)
cons_2 <- cbind(mat_i*0,mat_j)
cons_3 <- cbind(mat_i*0,mat_j)*-
cons_4 <- cbind(mat_i*c_i,mat_j*0)
cons_1 <- cbind(mat_i*r_i,mat_j*-240)
cons_2 <- cbind(mat_i*0,mat_j)
cons_3 <- cbind(mat_i*0,mat_j)*-1
cons_4 <- cbind(mat_i*c_i,mat_j*0)
cons_5 <- cbind(mat_i,mat_j*0)*-1
cons_6 <- cbind(matrix(insto_matrix(i,c(3,4,5,8)),nrow = 1),mat_j*0)
cons_1 <- cbind(mat_i*r_i,mat_j*-240)
cons_2 <- cbind(mat_i*0,mat_j)
cons_3 <- cbind(mat_i*0,mat_j)*-1
cons_4 <- cbind(mat_i*c_i,mat_j*0)
cons_5 <- cbind(mat_i,mat_j*0)*-1
cons_6 <- cbind(matrix(insto_matrix(i,c(3,4,5,8)),nrow = 1),mat_j*0)*-1
plotPolytope(
rbind(cons_1, cons_2, cons_3*-1, cons_4, cons_5*-1, cons_6*-1),
c(0,10,7*-1,1000,3*-1,1*-1),
f.obj,
type = rep("c", ncol(A)),
crit = "max",
faces = rep("c", ncol(A)),
plotFaces = TRUE,
plotFeasible = TRUE,
plotOptimum = TRUE,
labels = "coord"
) + ggplot2::xlab("x") + ggplot2::ylab("y") + ggplot2::ggtitle("Solution (max) with other axis labels")
A <- rbind(cons_1, cons_2, cons_3*-1, cons_4, cons_5*-1, cons_6*-1)
b <- c(0,10,7*-1,1000,3*-1,1*-1)
obj <- f.obj  # coefficients c
plotPolytope(
A,
b,
obj,
type = rep("c", ncol(A)),
crit = "max",
faces = rep("c", ncol(A)),
plotFaces = TRUE,
plotFeasible = TRUE,
plotOptimum = TRUE,
labels = "coord"
) + ggplot2::xlab("x") + ggplot2::ylab("y") + ggplot2::ggtitle("Solution (max) with other axis labels")
i <-  8
j <- 10
mat_i <- matrix(1,1,i) #dummy matrix for x coefficients
mat_j <- matrix(1,1,j) #dummy matrix for a coefficients
p_i <- c(2.1, 0.5, 3, 2, 1, 1.5, 0.6, 1.8) #profit
r_i <- c(550, 400, 300, 350, 450, 500, 350, 200) #resource requirement
c_i <- c(200, 150, 400, 450, 300, 150, 200, 600) #cpu limit
cons_1 <- cbind(mat_i*r_i,mat_j*-240)
cons_2 <- cbind(mat_i*0,mat_j)
cons_3 <- cbind(mat_i*0,mat_j)
cons_4 <- cbind(mat_i*c_i,mat_j*0)
cons_5 <- cbind(mat_i,mat_j*0)
cons_6 <- cbind(matrix(insto_matrix(i,c(3,4,5,8)),nrow = 1),mat_j*0)
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
res <- lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
res
paste("Resource usage at ", round(sum(res)/j*100,digits = 2),"%")
paste("Resource usage at ", round(sum(res)/j*100,digits = 2),"%", sep = "")
# Set coefficients of the objective function
f.obj <- cbind(mat_i*p_i,mat_j*0)
# Set matrix corresponding to coefficients of constraints by rows
# Do not consider the non-negative constraint; it is automatically assumed
f.con <- rbind(cons_1, cons_2, cons_3, cons_4, cons_5, cons_6)
# Set inequality signs
f.dir <- c("<=", #cons_1
"<=", #cons_2
">=", #cons_3
"<=", #cons_4
">=", #cons_5
">=") #cons_6
# Set right hand side coefficients
f.rhs <- c(0,  #cons_1
10,#cons_2
7, #cons_3
1000,#cons_4
3,#cons_5
1) #cons_6
# Final value (z)
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)
# Variables final values
print("Projects")
lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[1:i]
print("Resources")
res <- lp("max", f.obj, f.con, f.dir, f.rhs, all.bin = TRUE)$solution[i+1:j]
res
paste("Resource usage at ", round(sum(res)/j*100,digits = 2),"%", sep = "")
